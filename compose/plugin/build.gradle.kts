/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details on writing Custom Plugins, please refer to https://docs.gradle.org/8.6/userguide/custom_plugins.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    `java-gradle-plugin`

    // Apply the Kotlin JVM plugin to add support for Kotlin.
    kotlin("jvm")

    // Apply the maven-publish plugin to add support for publishing to Maven repositories.
    `maven-publish`

    // Apply the ktlint plugin to enforce code style.
    id("org.jlleitschuh.gradle.ktlint") version "12.1.1"

    // Json serialization plugin.
    kotlin("plugin.serialization") version "2.0.0"

    // Publishing plugin
    id("com.gradle.plugin-publish") version "1.2.1"
}

repositories {
    mavenCentral()
}

dependencies {
    // WARNING!!! Adding dependencies to the plugins in highly discouraged. Make sure you know
    // what you are doing before adding dependencies to the plugin.
    implementation(libs.kotlin.compiler.embeddable)
    implementation(libs.kotlin.serialization)
    implementation(libs.kotlin.poet)

    // Testing dependencies
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    testImplementation(project(":plugin"))
    implementation(project(":annotations"))
}

gradlePlugin {
    // Define the plugin
    val figmaCodeConnect by plugins.creating {
        id = property("ID").toString()
        implementationClass = property("IMPLEMENTATION_CLASS").toString()
        group = property("GROUP").toString()

        version = property("VERSION").toString()
        displayName = property("DISPLAY_NAME").toString()
        description = property("DESCRIPTION").toString()
        tags = listOf("kotlin", "figma", "compose", "android")
    }

    website.set(property("WEBSITE").toString())
    vcsUrl.set(property("VCS_URL").toString())
}

// Add a source set for the functional test suite
val functionalTestSourceSet =
    sourceSets.create("functionalTest") {
    }

configurations["functionalTestImplementation"].extendsFrom(configurations["testImplementation"])
configurations["functionalTestRuntimeOnly"].extendsFrom(configurations["testRuntimeOnly"])

// Add a task to run the functional tests
val functionalTest by tasks.registering(Test::class) {
    testClassesDirs = functionalTestSourceSet.output.classesDirs
    classpath = functionalTestSourceSet.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets.add(functionalTestSourceSet)

tasks.named<Task>("check") {
    // Run the functional tests as part of `check`
    dependsOn(functionalTest)
}

tasks.named<Test>("test") {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}
